{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["baseUrl","request","url","option","fetch","then","response","json","data","getPost","postId","PostsList","selectedUser","onChangePost","selectedPost","useState","posts","setPosts","useEffect","userId","className","length","map","id","title","body","key","type","classNames","active","onClick","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","inputHandler","event","target","value","clearForm","onSubmit","preventDefault","placeholder","onChange","getPostComments","removeComments","commentId","method","PostDetails","post","setPost","comments","setComments","commentsVisible","setCommentsVisible","loadPostAndComments","a","Promise","all","postServer","commentsServer","removeHandler","com","filter","newComment","JSON","stringify","addedCom","App","setSelectedUser","users","setUsers","selectedPostId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8afc85eb.chunk.js","sourcesContent":["export const baseUrl = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, option = {}) => fetch(baseUrl + url, option)\n  .then(response => response.json())\n  .then(data => data.data);\n","import { request } from './api';\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPosts = () => request('/posts');\n\nexport const getPost = postId => request(`/posts/${postId}`);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport classNames from 'classnames';\nimport { getPosts, getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedUser, onChangePost, selectedPost }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUser === 0) {\n      getPosts().then(data => setPosts(data));\n    } else {\n      getUserPosts(selectedUser).then(data => setPosts(data));\n    }\n  }, [selectedUser]);\n\n  const postHandler = (postId) => {\n    if (postId === selectedPost) {\n      onChangePost(null);\n    } else {\n      onChangePost(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length ? (\n          posts.map(({ id, userId, title, body }) => (\n            <li key={id} className=\"PostsList__item\">\n              <div>\n                <b>\n                  [User #$\n                  {userId}\n                  ]:\n                  {' '}\n                </b>\n                {title}\n              </div>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button button',\n                  { active: id === selectedPost },\n                )}\n                onClick={() => postHandler(id)}\n              >\n                {selectedPost === id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))\n        ) : (\n          <p>User have not post</p>\n        )\n        }\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUser: PropTypes.number.isRequired,\n  onChangePost: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ postId, onAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const inputHandler = (event) => {\n    // eslint-disable-next-line no-shadow\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n    }\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    onAdd({\n      name,\n      body,\n      email,\n      postId,\n    });\n\n    clearForm();\n  };\n\n  const clearForm = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  onAdd: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nexport const removeComments = commentId => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n\nexport const addComment = body => request(`/comments`, {\n  method: 'POST',\n  body: JSON.stringify(body),\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n// eslint-disable-next-line max-len\nimport { addComment, getPostComments, removeComments } from '../../api/comments';\nimport { getPost } from '../../api/posts';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n\n  useEffect(() => {\n    if (!postId) {\n      setPost(null);\n\n      return;\n    }\n\n    loadPostAndComments(postId);\n  }, [postId]);\n\n  const loadPostAndComments = async(id) => {\n    const [postServer, commentsServer] = await Promise.all(\n      [getPost(id), getPostComments(id)],\n    );\n\n    setPost(postServer);\n    setComments(commentsServer);\n  };\n\n  const removeHandler = async(commentId) => {\n    await removeComments(commentId);\n    setComments(com => com.filter(({ id }) => commentId !== id));\n  };\n\n  const addNewComment = (newComment) => {\n    addComment(newComment)\n      .then(addedCom => setComments(com => [...com, addedCom]));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n\n      {post ? (\n        <>\n          <h2>Post details:</h2>\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              onClick={() => setCommentsVisible(value => !value)}\n              className=\"button\"\n            >\n              {commentsVisible ? 'Hide' : 'Show'}\n              {' '}\n              {comments.length}\n              {' '}\n              comments\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {commentsVisible && comments.map(({ id, body }) => (\n                <li key={id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeHandler(id)}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                onAdd={addNewComment}\n              />\n            </div>\n          </section>\n        </>\n      ) : (\n        <h2>Select a post</h2>\n      )}\n\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  useEffect(() => {\n    getUsers().then(data => setUsers(data));\n  }, []);\n\n  const selectedUserHandler = (event) => {\n    const userId = event.target.value;\n\n    setSelectedUser(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select className=\"App__user-selector\" onChange={selectedUserHandler}>\n            <option value=\"\">All users</option>\n            {users.map(({ id, name }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            onChangePost={setSelectedPostId}\n            selectedPost={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}